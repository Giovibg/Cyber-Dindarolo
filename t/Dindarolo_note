Dependencies:
-Python3
-Django
-React
-React Native with EXPO
Successfully tested with Debian Stretch

Start Project:

-(optional)Create a Python3 venv
-Install backend requirements:	pip install -r requirements.txt
-Run server:  python3 manage.py runserver IP:port
-Run development frontend:  cd frontend/ ---> npm run dev
-run expo for mobile:  cd mobile/DindaroloMobile/ ---> npm run android
-Change IP of server for API Requests of Frontend and Mobile(default: 127.0.0.1): 
			-replace `baseURL` address in /frontend/src/apiServices.js
			-replace `baseURL` address in /mobile/DindaroloMobile/components/apiServices.js




Folders project navigation:

/backend: all general Django configurations of the backend(settings.py, urls...). 
/api: everything about API management(models, serializers, views...).
/jwt_auth: everything about authentication management.
/frontend: web frontend developed in React
/mobile/DindaroloMobile: Native app for Android developed with React Native




Main API features:

-Nobody which is not authenticated can't interact with the portal.

-Authentication with JWT:	- login (if account available) posting username and password at: /api/token/.
				- register account posting username, email,password,confirm password at /jwt_auth/register/.
				- Both login and register returns an Access Token(valid for 5minutes) and a Refresh token(valid for 24h).


			

-Add product:			-Each user can add a product (and gain a credit), putting name, description, quantity and unit_price to /api/products/ . Product inserted will be available for all other users
				-If a product is already available:
					- new quantity available = previous quantity available + new_quantity inserted.
					- new unit price for product will be weighted:  ((previous unit_price * previous quantity) +(new unit_price * new_quantity)) / total_quantity)

				- New budget available for user: old budget available + (quantity * unit_price)



-Make a transaction(buy something):	Each user can buy a product, previously inserted from someone, putting name of product and quantity of pieces we want to buy to /api/transactions/
				   	If sufficient budget, if sufficient quantity available => Transaction created. New budget for user = old_budget - (quantity_bought * unit_price_product).


-View list of all products available inserted by users: - GET at /api/products/ 	=> return: product_name, description, quantity_available, weighted unit_price 

-View History of transactions made by an user, positive and negative:		-GET at /api/transactions/   => return: product name, quantity, unit_price, subtotal, currency, date of transaction, type of transaction(positive or negative transaction)

-Obtain budget available for current user: - GET /api/budget => return user_id, budget
